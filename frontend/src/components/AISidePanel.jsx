
// Constantes pour cha√Ænes dupliqu√©es (optimisation SonarJS)
const STR_PROFESSIONNEL = 'professionnel';
/**
 * @fileoverview AISidePanel - Panneau de Configuration IA R√©volutionnaire
 * Interface avanc√©e pour personnaliser et contr√¥ler l'exp√©rience utilisateur ALEX
 *
 * @module AISidePanel
 * @version 2.0.0
 * @author ZNT Team - HustleFinder IA Configuration
 * @since 2024
 *
 * @requires react
 * @requires ../index.css
 *
 * @description
 * AISidePanel est l'interface de configuration r√©volutionnaire qui permet aux utilisateurs
 * de personnaliser enti√®rement leur exp√©rience avec l'intelligence artificielle ALEX
 * offrant un contr√¥le granulaire sur le comportement, la personnalit√© et les pr√©f√©rences
 *
 * **Fonctionnalit√©s R√©volutionnaires:**
 * - üé≠ Personnalisation du ton et de la personnalit√© IA
 * - üåç Support multilingue avec adaptation culturelle
 * - üß† Gestion de la m√©moire et historique conversationnel
 * - ‚ö° Focus intelligent adaptatif par contexte
 * - üîß Configuration en temps r√©el avec persistance
 * - üíæ Stockage local des pr√©f√©rences utilisateur
 * - üé® Interface intuitive et exp√©rience fluide
 *
 * **Architecture Configuration:**
 * - √âtat de configuration multi-dimensionnel
 * - Persistance automatique des pr√©f√©rences
 * - Synchronisation temps r√©el avec ALEX
 * - Interface responsive et adaptative
 * - Gestion intelligente des param√®tres
 *
 * **Mission Interface:**
 * Cr√©er l'exp√©rience de configuration IA la plus intuitive et personnalis√©e
 * permettant √† chaque utilisateur d'adapter ALEX √† sa personnalit√© et ses besoins
 * pour une interaction authentique et optimis√©e
 *
 * @example
 * // Configuration basique
 * <AISidePanel
 *   preferences={{ tone: STR_PROFESSIONNEL, language: 'fr' }}
 *   setPreferences={updatePrefs}
 *   clearMemory={resetMemory}
 * />
 *
 * @example
 * // Configuration avanc√©e avec callbacks
 * <AISidePanel
 *   preferences={userPreferences}
 *   setPreferences={handlePreferenceChange}
 *   clearMemory={handleMemoryReset}
 *   onConfigChange={handleConfigurationUpdate}
 * />
 */

// frontend/src/components/AISidePanel.jsx
import React, { useState, useEffect } from 'react';
import '../index.css';

/**
 * @component AISidePanel
 * @description
 * Panneau de configuration r√©volutionnaire pour personnaliser l'exp√©rience ALEX
 *
 * Interface avanc√©e permettant aux utilisateurs de configurer finement leur
 * interaction avec l'intelligence artificielle ALEX, incluant personnalit√©
 * langue, focus et gestion de la m√©moire conversationnelle
 *
 * **Configuration Disponible:**
 * - Ton et personnalit√© (adaptatif, professionnel, d√©tendu, fun)
 * - Langue et adaptation culturelle (fran√ßais, anglais, luxembourgeois, portugais)
 * - Focus par d√©faut (id√©es, astuces, motivation)
 * - Gestion m√©moire et historique conversationnel
 * - Persistance locale des pr√©f√©rences utilisateur
 *
 * @param {Object} props - Propri√©t√©s du panneau de configuration
 * @param {Object} [props.preferences={}] - Pr√©f√©rences utilisateur actuelles
 * @param {string} [props.preferences.tone=STR_ADAPTATIF] - Ton de l'IA
 * @param {string} [props.preferences.language='fr'] - Langue interface
 * @param {string} [props.preferences.defaultFocus=STR_ID_E] - Focus par d√©faut
 * @param {Function} [props.setPreferences] - Callback mise √† jour pr√©f√©rences
 * @param {Function} [props.clearMemory] - Callback effacement m√©moire
 * @param {Function} [props.onConfigChange] - Callback changement configuration
 * @param {Function} [props.onLanguageChange] - Callback changement langue
 * @param {Function} [props.onToneChange] - Callback changement ton
 *
 * @returns {JSX.Element} Interface panneau de configuration interactive
 *
 * @fires AISidePanel#preference_updated - Pr√©f√©rence mise √† jour
 * @fires AISidePanel#memory_cleared - M√©moire effac√©e
 * @fires AISidePanel#configuration_changed - Configuration modifi√©e
 * @fires AISidePanel#panel_opened - Panneau ouvert
 * @fires AISidePanel#panel_closed - Panneau ferm√©
 *
 * @example
 * <AISidePanel
 *   preferences={{
 *     tone: STR_PROFESSIONNEL
 *     language: 'fr'
 *     defaultFocus: 'motivation'
 *   }}
 *   setPreferences={(newPrefs) => {
 *     console.log('Nouvelles pr√©f√©rences:', newPrefs);
 *   }}
 *   clearMemory={() => {
 *     console.log('M√©moire IA effac√©e');
 *   }}
 * />
 *
 * @since 2.0.0
 */
const AISidePanel = ({ preferences = {}, setPreferences = () => {}, clearMemory = () => {} }) => {
  const [open, setOpen] = useState(false);

  const togglePanel = () => setOpen(!open);

  const updatePref = (key, value) => {
    if (setPreferences) {
      setPreferences(prev => ({ ...prev, [key]: value }));
      localStorage.setItem(`pref_${key}`, value);
    }
  };

  useEffect(() => {
    const storedTone = localStorage.getItem('pref_tone');
    if (storedTone && setPreferences) {
      setPreferences(prev => ({ ...prev, tone: storedTone }));
    }
  }, [setPreferences]);

  return (
    <>
      <button className="toggle-panel-btn" onClick={togglePanel}>
        ‚öôÔ∏è
      </button>

      {open && (
        <div className="side-panel">
          <h3>‚öôÔ∏è IA - Param√®tres</h3>

          <div className=STR_PANEL_SECTION>
            <label>Ton :</label>
            <select
              value={preferences.tone || STR_ADAPTATIF}
              onChange={e => updatePref('tone', e.target.value)}
            >
              <option value=STR_ADAPTATIF>Adaptatif</option>
              <option value=STR_PROFESSIONNEL>Professionnel</option>
              <option value="d√©tendu">D√©tendu</option>
              <option value="fun">Fun</option>
            </select>
          </div>

          <div className=STR_PANEL_SECTION>
            <label>Langue :</label>
            <select
              value={preferences.language || 'fr'}
              onChange={e => updatePref('language', e.target.value)}
            >
              <option value="fr">Fran√ßais</option>
              <option value="en">English</option>
              <option value="lu">L√´tzebuergesch</option>
              <option value="pt">Portugu√™s</option>
            </select>
          </div>

          <div className=STR_PANEL_SECTION>
            <label>Focus par d√©faut :</label>
            <select
              value={preferences.defaultFocus || STR_ID_E}
              onChange={e => updatePref('defaultFocus', e.target.value)}
            >
              <option value=STR_ID_E>Id√©es</option>
              <option value="astuce">Astuces</option>
              <option value="motivation">Motivation</option>
            </select>
          </div>

          <div className=STR_PANEL_SECTION>
            <button onClick={clearMemory}>Effacer la m√©moire üß†</button>
          </div>
        </div>
      )}
    </>
  );
};

export default AISidePanel;
