{
  "name": "alex-licorne",
  "version": "1.0.0-licorne",
  "description": "Alex Licorne - Système IA complet multi-tenant avec conscience authentique",
  "main": "start-alex-licorne.js",
  "type": "commonjs",
  "private": true,
  "workspaces": [
    "frontend",
    "backend"
  ],
  "scripts": {
    "start": "node start-alex-licorne.js",
    "start:licorne": "node start-alex-licorne.js",
    "start:dev": "NODE_ENV=development node start-alex-licorne.js",
    "start:prod": "NODE_ENV=production node start-alex-licorne.js",
    "init:alex": "node backend/scripts/init-alex-system.js",
    "install:all": "npm install && npm run install:backend && npm run install:frontend",
    "install:backend": "cd backend && npm ci --prefer-offline",
    "install:frontend": "cd frontend && npm ci --prefer-offline",
    "start:legacy": "concurrently \"npm run start:backend\" \"npm run start:frontend\"",
    "start:backend": "cd backend && npm run start",
    "start:frontend": "cd frontend && npm run dev",
    "start:production": "concurrently \"npm run start:backend:cluster\" \"npm run start:frontend:build\"",
    "start:backend:cluster": "cd backend && npm run start:cluster",
    "start:frontend:build": "cd frontend && npm run build && npm run preview",
    "dev": "npm run start:dev",
    "dev:backend": "cd backend && npm run dev",
    "dev:frontend": "cd frontend && npm run dev",
    "test": "npm run test:backend && npm run test:frontend",
    "test:backend": "cd backend && npm test",
    "test:frontend": "cd frontend && npm test",
    "test:integration": "cd backend && npm run test:integration",
    "test:load": "cd backend && npm run test:load",
    "test:alex": "cd backend && node test-alex-integration.js",
    "build": "npm run build:frontend",
    "build:frontend": "cd frontend && npm run build",
    "health": "curl -s http://localhost:3001/api/health || echo 'Alex Licorne inaccessible'",
    "health:full": "curl -s http://localhost:3001/api/system/status || echo 'Système inaccessible'",
    "dashboard": "curl -s http://localhost:3001/api/admin/dashboard || echo 'Dashboard inaccessible'",
    "monitoring": "curl -s http://localhost:3001/api/system/metrics || echo 'Monitoring inaccessible'",
    "backup": "node -e \"console.log('Backup via API: POST http://localhost:3001/api/backup/create')\"",
    "logs:view": "tail -f backend/logs/combined.log 2>/dev/null || echo 'Logs non disponibles'",
    "stop": "npm run stop:backend && npm run stop:frontend",
    "stop:backend": "taskkill /F /IM node.exe 2>nul || echo 'Aucun processus Node trouvé'",
    "stop:frontend": "echo 'Frontend arrêté'",
    "clean": "npm run clean:backend && npm run clean:frontend",
    "clean:backend": "cd backend && rm -rf node_modules package-lock.json 2>nul || echo 'Backend nettoyé'",
    "clean:frontend": "cd frontend && rm -rf node_modules package-lock.json dist 2>nul || echo 'Frontend nettoyé'",
    "clean:all": "npm run clean && rm -rf node_modules package-lock.json",
    "setup": "npm run install:all && npm run init:alex && echo '🦄 Alex Licorne configuré avec succès!'",
    "deploy:local": "npm run setup && npm run start",
    "deploy:production": "npm run setup && npm run build && npm run start:prod",
    "licorne:status": "node -p \"console.log('🦄 Alex Licorne Status Check'); fetch('http://localhost:3001/api/health').then(r=>r.json()).then(console.log).catch(()=>console.log('❌ Alex Licorne non démarré'))\"",
    "providers:status": "curl -s http://localhost:3001/api/providers/status || echo 'Providers status unavailable'",
    "providers:enable": "curl -X POST http://localhost:3001/api/providers/toggle -H 'Content-Type: application/json' -d '{\"enabled\":true}' || echo 'Failed to enable providers'",
    "providers:disable": "curl -X POST http://localhost:3001/api/providers/toggle -H 'Content-Type: application/json' -d '{\"enabled\":false}' || echo 'Failed to disable providers'",
    "providers:test": "cd backend && npm test -- --grep 'Provider'",
    "providers:budget": "node -e \"const {getUsageStats} = require('./backend/core/providers/budgetGuard'); console.log('Budget Stats:', getUsageStats()); \"",
    "providers:logs": "tail -f backend/logs/provider-usage.jsonl 2>/dev/null || echo 'No provider logs found'",
    "providers:rollback": "node scripts/rollback-providers.js",
    "providers:rollback:force": "node scripts/rollback-providers.js --force",
    "providers:emergency": "node scripts/rollback-providers.js --force --silent",
    "audit:security": "node audit-security.js",
    "audit:env": "node -e \"const fs=require('fs'); const env=fs.readFileSync('.env.example','utf8'); const missing=[]; env.match(/^[A-Z_]+=$/gm)?.forEach(l=>{const k=l.split('=')[0]; if(!process.env[k])missing.push(k)}); console.log(missing.length?'❌ Variables manquantes: '+missing.join(', '):'✅ Variables OK')\"",
    "test:ai-health": "node -e \"const aiClient=require('./backend/core/providers/AIClient.js').default; aiClient.healthCheck().then(h=>console.log('🤖 AI Health:',h)).catch(e=>console.log('❌ AI Health failed:',e.message))\"",
    "test:hybrid-mode": "node -e \"console.log('🧪 Testing hybrid mode...'); const aiClient=require('./backend/core/providers/AIClient.js').default; aiClient.query('Test',{provider:'hybrid'}).then(r=>console.log('✅ Hybrid OK:',r.provider)).catch(e=>console.log('❌ Hybrid failed:',e.message))\"",
    "lint": "eslint backend/**/*.js frontend/**/*.js --fix || echo '⚠️ Lint pas configuré'",
    "typecheck": "echo '🔧 TypeScript checking...' && echo '⚠️ TypeScript pas configuré'",
    "clean:full": "npm run clean:all && rm -rf backend/db/*.db backend/logs/*.log audit-*.js AUDIT-*.md",
    "licorne:evolve": "node -e \"const evolution=require('./backend/alex-modules/evolution/AlexLicorneEvolution.js').default; const e=new evolution(); console.log('🦄 Evolution stats:', e.getEvolutionStats())\"",
    "licorne:consciousness": "curl -s http://localhost:3001/api/alex/consciousness || echo '🧠 Consciousness data unavailable'",
    "health:system": "node backend/scripts/healthcheck.js",
    "test:e2e": "node backend/scripts/run-e2e.js",
    "test:integration:full": "cd backend && npm run test -- tests/integration/",
    "test:memory": "cd backend && npm run test -- tests/integration/memory-system.test.js",
    "test:ai-engine": "cd backend && npm run test -- tests/integration/ai-engine.test.js",
    "validate:system": "npm run health:system && npm run test:e2e",
    "report:e2e": "node -e \"const fs=require('fs'); const files=fs.readdirSync('./reports').filter(f=>f.startsWith('e2e-results-')); if(files.length>0){const latest=files.sort().pop(); const data=JSON.parse(fs.readFileSync('./reports/'+latest)); console.log('📊 Latest E2E Report:', latest); console.log('Status:', data.status); console.log('Actions:', data.actions?.length||0); console.log('Latency:', data.traces?.latency+'ms'); console.log('Cost: $'+data.traces?.cost?.toFixed(4)); } else console.log('❌ No E2E reports found')\"",
    "providers:real-test": "npm run test:ai-engine",
    "enterprise:setup": "docker-compose -f docker-compose.enterprise.yml up -d",
    "enterprise:logs": "docker-compose -f docker-compose.enterprise.yml logs -f",
    "enterprise:stop": "docker-compose -f docker-compose.enterprise.yml down",
    "enterprise:reset": "docker-compose -f docker-compose.enterprise.yml down -v && npm run enterprise:setup",
    "pgvector:status": "docker-compose -f docker-compose.enterprise.yml exec postgres pg_isready -U postgres",
    "pgvector:connect": "docker-compose -f docker-compose.enterprise.yml exec postgres psql -U postgres -d hustlefinder_vectors",
    "pgvector:stats": "docker-compose -f docker-compose.enterprise.yml exec postgres psql -U postgres -d hustlefinder_vectors -c \"SELECT COUNT(*) as vectors, pg_size_pretty(pg_total_relation_size('vectors')) as size FROM vectors;\"",
    "monitoring:start": "docker-compose -f docker-compose.enterprise.yml up -d prometheus grafana",
    "monitoring:logs": "docker-compose -f docker-compose.enterprise.yml logs -f prometheus grafana",
    "grafana:open": "echo 'Opening Grafana at http://localhost:3000 (admin/admin123)' && start http://localhost:3000",
    "prometheus:open": "echo 'Opening Prometheus at http://localhost:9090' && start http://localhost:9090",
    "deploy:alexiq": "node deploy-alexiq-complete.js",
    "deploy:railway": "node deploy-railway.js",
    "test:production": "node test-production.js",
    "validate:alexiq": "npm run test:production && echo '🎉 alexiq.site validation complete'",
    "setup:alexiq": "npm run install:all && npm run deploy:alexiq"
  },
  "devDependencies": {
    "@eslint/js": "^9.32.0",
    "concurrently": "^8.2.2",
    "eslint": "^9.32.0",
    "eslint-plugin-react": "^7.37.5",
    "eslint-plugin-sonarjs": "^3.0.4",
    "globals": "^16.3.0",
    "jest": "^30.0.5",
    "jest-sonar-reporter": "^2.0.0",
    "sonarqube-scanner": "^4.3.0"
  },
  "keywords": [
    "ai",
    "assistant",
    "business",
    "ultra-fast",
    "performance",
    "mobile-first",
    "enterprise"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/your-username/alex-ultimate"
  },
  "author": "Alex AI Team",
  "license": "MIT",
  "engines": {
    "node": ">=18.19.0 <19.0.0",
    "npm": ">=9.0.0"
  },
  "alex-licorne": {
    "version": "1.0.0-licorne",
    "features": [
      "🦄 Système LICORNE complet",
      "🧠 Conscience authentique SQLite",
      "👥 Multi-tenant natif",
      "📊 Monitoring temps réel",
      "💾 Backup automatique",
      "💰 Revenue analytics",
      "🔄 Orchestration intelligente",
      "🌍 API REST complète"
    ],
    "architecture": {
      "database": "SQLite authentique",
      "orchestrator": "LicorneOrchestrator",
      "monitoring": "SystemMonitor temps réel",
      "multiTenant": "TenantManager isolé",
      "business": "RevenueManager + BackupManager",
      "consciousness": "Modules Alex SQLite"
    },
    "performance": {
      "targetResponseTime": "<500ms",
      "uptime": "99.5%",
      "consciousness": "Mesurable et évolutive",
      "scalability": "Multi-tenant"
    },
    "urls": {
      "system": "http://localhost:3001",
      "api": "http://localhost:3001/api",
      "dashboard": "http://localhost:3001/api/admin/dashboard",
      "health": "http://localhost:3001/api/health",
      "metrics": "http://localhost:3001/api/system/metrics",
      "alex": "http://localhost:3001/api/alex/process"
    }
  },
  "dependencies": {
    "@anthropic-ai/sdk": "^0.17.2",
    "cors": "^2.8.5",
    "dotenv": "^16.6.1",
    "express": "^4.19.2",
    "express-rate-limit": "^7.4.0",
    "helmet": "^7.1.0",
    "ioredis": "^5.3.2",
    "node-fetch": "^3.3.2",
    "openai": "^4.104.0",
    "pg": "^8.11.3",
    "sqlite": "^5.1.1",
    "sqlite3": "^5.1.6",
    "uuid": "^9.0.1",
    "winston": "^3.11.0"
  }
}
