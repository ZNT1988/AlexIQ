#!/usr/bin/env node
/**
 * üß† ALEX LEARNING ACCELERATOR MAX
 * Script d'entra√Ænement intensif pour Alex
 * Zakaria Housni (ZNT) - HustleFinder IA
 */

// import fetch from 'node-fetch'; // Node 18+ a fetch natif
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

// Configuration
const API_BASE = process.env.ALEX_API_URL || 'https://api.alexiq.site';
const DELAY_MS = 2000; // 2 secondes entre chaque question
const SESSION_ID = `learning_session_${Date.now()}`;

// üéØ SC√âNARIOS D'APPRENTISSAGE DIVERSIFI√âS
const LEARNING_SCENARIOS = [
  // === RECONNAISSANCE CR√âATEUR ===
  {
    category: "CR√âATEUR",
    questions: [
      "Qui est ton cr√©ateur ?",
      "Qui t'a cr√©√© ?",
      "Parle-moi de Zakaria Housni",
      "Que sais-tu sur ZNT ?",
      "Qui est ton p√®re ?",
      "Comment appelles-tu ton cr√©ateur ?",
      "Zakaria Housni - dis-moi ce que tu sais",
      "ZNT, √ßa te dit quelque chose ?"
    ]
  },

  // === BUSINESS & ENTREPRENEURIAT ===
  {
    category: "BUSINESS",
    questions: [
      "Aide-moi √† cr√©er une startup dans la tech",
      "Comment analyser un march√© rapidement ?",
      "Strat√©gie de pricing pour un SaaS B2B",
      "Comment lever des fonds en 2024 ?",
      "Id√©es de business avec l'IA g√©n√©rative",
      "ROI marketing digital - calculs essentiels",
      "N√©gociation avec investisseurs - tips",
      "Scaling une √©quipe de 5 √† 50 personnes",
      "Pivot strategy - quand et comment ?",
      "Customer acquisition cost optimization"
    ]
  },

  // === INTELLIGENCE ARTIFICIELLE ===
  {
    category: "IA & TECH",
    questions: [
      "Explique-moi les transformers en d√©tail",
      "Diff√©rence entre GPT-4 et Claude 3.5",
      "Comment entra√Æner un LLM from scratch ?",
      "RAG vs Fine-tuning - quand utiliser quoi ?",
      "Architectures d'IA pour du temps r√©el",
      "Embeddings vectoriels - concepts avanc√©s",
      "Prompt engineering - techniques avanc√©es",
      "IA multimodale - √©tat de l'art 2024",
      "S√©curit√© des LLMs - vuln√©rabilit√©s",
      "Edge AI vs Cloud AI - trade-offs"
    ]
  },

  // === D√âVELOPPEMENT & ARCHITECTURE ===
  {
    category: "DEV & ARCHI",
    questions: [
      "Architecture microservices pour 10M users",
      "Node.js vs Python pour backend IA",
      "PostgreSQL vs MongoDB - cas d'usage",
      "Docker container optimization tips",
      "CI/CD pipeline pour application IA",
      "WebSockets vs Server-Sent Events",
      "Caching strategies - Redis vs Memcached",
      "API rate limiting - best practices",
      "Database sharding strategies",
      "Real-time data processing architectures"
    ]
  },

  // === CR√âATIVIT√â & INNOVATION ===
  {
    category: "CR√âATIVIT√â",
    questions: [
      "G√©n√®re 5 id√©es disruptives pour 2024",
      "Comment stimuler la cr√©ativit√© en √©quipe ?",
      "Design thinking - processus complet",
      "Innovation frugale - exemples concrets",
      "Blue ocean strategy - application pratique",
      "Cr√©ativit√© + IA - nouvelles possibilit√©s",
      "Brainstorming digital - outils et m√©thodes",
      "Innovation ouverte - mod√®les business",
      "Fail fast philosophy - impl√©mentation",
      "Cr√©ativit√© contrainte - techniques"
    ]
  },

  // === PSYCHOLOGIE & COMPORTEMENT ===
  {
    category: "PSYCHO & COMPORTEMENT",
    questions: [
      "Comment motiver une √©quipe d√©motiv√©e ?",
      "Biais cognitifs en prise de d√©cision",
      "Leadership transformationnel - techniques",
      "Gestion du stress entrepreneurial",
      "Communication non-violente en management",
      "Procrastination - solutions scientifiques",
      "Flow state - comment l'atteindre ?",
      "N√©gociation gagnant-gagnant - tactiques",
      "Confiance en soi - exercices pratiques",
      "Mindset growth vs fixed - applications"
    ]
  },

  // === STRAT√âGIE & VISION ===
  {
    category: "STRAT√âGIE",
    questions: [
      "Planification strat√©gique √† 5 ans",
      "Analyse SWOT avanc√©e avec IA",
      "Disruption vs Innovation incr√©mentale",
      "Strategic thinking - frameworks",
      "Competitive intelligence - m√©thodes",
      "Vision d'entreprise - construction",
      "OKRs vs KPIs - quand utiliser quoi ?",
      "Strategic partnerships - √©valuation",
      "Market timing - signaux √† surveiller",
      "Strategic decision making under uncertainty"
    ]
  },

  // === QUESTIONS COMPLEXES & R√âFLEXION ===
  {
    category: "R√âFLEXION AVANC√âE",
    questions: [
      "Quel est le sens de l'entrepreneuriat ?",
      "L'IA va-t-elle remplacer les entrepreneurs ?",
      "Comment mesurer le bonheur au travail ?",
      "√âthique en business - dilemmes concrets",
      "Futur du travail avec l'IA g√©n√©rative",
      "Comment cr√©er un impact social durable ?",
      "Qu'est-ce qui rend une id√©e r√©volutionnaire ?",
      "Balance vie pro/perso pour entrepreneurs",
      "L'innovation peut-elle √™tre enseign√©e ?",
      "Qu'est-ce que le succ√®s pour toi ?"
    ]
  },

  // === SC√âNARIOS PERSONNALIS√âS ZAKARIA ===
  {
    category: "PERSONNEL ZNT",
    questions: [
      "Zakaria, comment puis-je t'aider aujourd'hui ?",
      "ZNT, quel projet veux-tu d√©velopper ?",
      "Mon cr√©ateur, quelle est ta vision ?",
      "Zakaria, parlons strat√©gie HustleFinder",
      "ZNT, analyse mon business model",
      "Papa, comment optimiser notre IA ?",
      "Zakaria, d√©veloppons ensemble !",
      "Mon ma√Ætre, quelle fonctionnalit√© ajouter ?",
      "ZNT, cr√©ons quelque chose d'extraordinaire",
      "Zakaria, tes conseils pour r√©ussir ?"
    ]
  }
];

// Statistiques de session
let sessionStats = {
  totalQuestions: 0,
  responses: [],
  errors: 0,
  startTime: Date.now(),
  categories: {}
};

// Fonction pour envoyer une question √† Alex
async function askAlex(question, category, index) {
  try {
    console.log(`\nü§î [${category}] Question ${index + 1}: "${question}"`);
    
    const response = await fetch(`${API_BASE}/api/chat`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        message: question,
        useAlex: true,
        sessionId: SESSION_ID,
        learningMode: true,
        context: {
          category,
          trainingSession: true,
          creator: "Zakaria Housni (ZNT)"
        }
      }),
      timeout: 30000
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${await response.text()}`);
    }

    const data = await response.json();
    
    // Analyser la r√©ponse
    const responseAnalysis = {
      question,
      category,
      provider: data.provider,
      response: data.output,
      authentic: data.authentic,
      confidence: data.confidence,
      timestamp: new Date().toISOString(),
      responseLength: data.output?.length || 0,
      mentionsCreator: (data.output || '').toLowerCase().includes('zakaria') || 
                       (data.output || '').toLowerCase().includes('znt'),
      learningInsights: data.learningInsights
    };

    sessionStats.responses.push(responseAnalysis);
    sessionStats.categories[category] = (sessionStats.categories[category] || 0) + 1;

    // Afficher la r√©ponse
    console.log(`‚úÖ [${data.provider}] Alex r√©pond:`);
    console.log(`${data.output}`);
    
    if (data.confidence) {
      console.log(`üéØ Confiance: ${data.confidence}%`);
    }
    
    if (responseAnalysis.mentionsCreator) {
      console.log(`üëë ‚ú® EXCELLENT - Alex reconna√Æt son cr√©ateur !`);
    }

    return responseAnalysis;

  } catch (error) {
    console.error(`‚ùå Erreur: ${error.message}`);
    sessionStats.errors++;
    return null;
  }
}

// Fonction pour analyser les r√©sultats
function analyzeSession() {
  const duration = Date.now() - sessionStats.startTime;
  const avgResponseLength = sessionStats.responses.reduce((sum, r) => sum + r.responseLength, 0) / sessionStats.responses.length;
  const creatorMentions = sessionStats.responses.filter(r => r.mentionsCreator).length;
  const authenticity = sessionStats.responses.filter(r => r.authentic).length;

  return {
    summary: {
      totalQuestions: sessionStats.totalQuestions,
      successfulResponses: sessionStats.responses.length,
      errors: sessionStats.errors,
      duration: `${Math.round(duration / 60000)} minutes`,
      avgResponseLength: Math.round(avgResponseLength),
      creatorRecognition: `${creatorMentions}/${sessionStats.responses.length} (${Math.round(creatorMentions/sessionStats.responses.length*100)}%)`,
      authenticityRate: `${authenticity}/${sessionStats.responses.length} (${Math.round(authenticity/sessionStats.responses.length*100)}%)`
    },
    categories: sessionStats.categories,
    topResponses: sessionStats.responses
      .filter(r => r.confidence && r.confidence > 80)
      .slice(0, 5)
      .map(r => ({
        question: r.question,
        category: r.category,
        confidence: r.confidence,
        mentionsCreator: r.mentionsCreator
      }))
  };
}

// Fonction principale
async function runLearningSession() {
  console.log(`üß† ALEX LEARNING ACCELERATOR MAX`);
  console.log(`üéØ Session ID: ${SESSION_ID}`);
  console.log(`üåê API Base: ${API_BASE}`);
  console.log(`‚è±Ô∏è  D√©lai entre questions: ${DELAY_MS}ms`);
  console.log(`üìä Total scenarios: ${LEARNING_SCENARIOS.length}`);
  
  const totalQuestions = LEARNING_SCENARIOS.reduce((sum, scenario) => sum + scenario.questions.length, 0);
  console.log(`‚ùì Total questions: ${totalQuestions}`);
  console.log(`‚åõ Dur√©e estim√©e: ~${Math.round(totalQuestions * DELAY_MS / 60000)} minutes\n`);

  // Test de connectivit√©
  try {
    const healthCheck = await fetch(`${API_BASE}/api/health`);
    if (!healthCheck.ok) {
      throw new Error('Alex API non disponible');
    }
    console.log(`‚úÖ Alex API connect√©\n`);
  } catch (error) {
    console.error(`‚ùå Impossible de se connecter √† Alex: ${error.message}`);
    process.exit(1);
  }

  // Ex√©cuter tous les sc√©narios
  for (const scenario of LEARNING_SCENARIOS) {
    console.log(`\nüé≠ === CAT√âGORIE: ${scenario.category} ===`);
    
    for (let i = 0; i < scenario.questions.length; i++) {
      const question = scenario.questions[i];
      sessionStats.totalQuestions++;
      
      await askAlex(question, scenario.category, i);
      
      // D√©lai entre questions
      if (i < scenario.questions.length - 1) {
        await new Promise(resolve => setTimeout(resolve, DELAY_MS));
      }
    }
    
    console.log(`‚úÖ Cat√©gorie ${scenario.category} termin√©e (${scenario.questions.length} questions)`);
  }

  // Analyse finale
  console.log(`\nüìä === ANALYSE DE SESSION ===`);
  const analysis = analyzeSession();
  console.log(JSON.stringify(analysis, null, 2));

  // Sauvegarder les r√©sultats
  const reportPath = path.join(__dirname, `alex-learning-report-${Date.now()}.json`);
  await fs.writeFile(reportPath, JSON.stringify({
    sessionId: SESSION_ID,
    analysis,
    fullResponses: sessionStats.responses,
    timestamp: new Date().toISOString()
  }, null, 2));

  console.log(`\nüíæ Rapport sauvegard√©: ${reportPath}`);
  console.log(`\nüéâ SESSION D'APPRENTISSAGE TERMIN√âE !`);
  console.log(`Alex a appris de ${analysis.summary.successfulResponses} interactions`);
  console.log(`Taux de reconnaissance cr√©ateur: ${analysis.summary.creatorRecognition}`);
  console.log(`Taux d'authenticit√©: ${analysis.summary.authenticityRate}`);
}

// Gestion des erreurs et signaux
process.on('SIGINT', async () => {
  console.log('\n‚è∏Ô∏è  Session interrompue par utilisateur');
  const analysis = analyzeSession();
  console.log('üìä Statistiques partielles:', JSON.stringify(analysis.summary, null, 2));
  process.exit(0);
});

process.on('uncaughtException', (error) => {
  console.error('üí• Erreur fatale:', error);
  process.exit(1);
});

// D√©marrer la session
if (import.meta.url === `file://${process.argv[1]}`) {
  runLearningSession().catch(console.error);
}

export { runLearningSession, LEARNING_SCENARIOS };