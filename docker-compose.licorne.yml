# ðŸ¦„ ALEX LICORNE - Docker Compose Configuration
# Version production-ready avec SQLite

version: '3.8'

services:
  alex-licorne:
    build:
      context: .
      dockerfile: Dockerfile.licorne
    container_name: alex-licorne-system
    restart: unless-stopped
    
    # Ports
    ports:
      - "3001:3001"
    
    # Variables d'environnement
    environment:
      - NODE_ENV=production
      - PORT=3001
      - HOST=0.0.0.0
      - DB_PATH=/app/data/hustlefinder.sqlite
      - LOG_LEVEL=info
      - DEBUG=false
    
    # Volumes pour persistance SQLite
    volumes:
      - ./backend/db:/app/data
      - ./backend/logs:/app/logs
      - ./backend/db/backups:/app/backups
    
    # SantÃ© du conteneur
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Logs
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Limites ressources
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M

  # Service de monitoring (optionnel)
  monitoring:
    image: prom/prometheus:latest
    container_name: alex-licorne-monitoring
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - alex-licorne
    profiles:
      - monitoring

  # Service de visualisation (optionnel)  
  grafana:
    image: grafana/grafana:latest
    container_name: alex-licorne-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=alexlicorne
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - monitoring
    profiles:
      - monitoring

volumes:
  grafana-data:

networks:
  default:
    name: alex-licorne-network
    driver: bridge