#!/usr/bin/env node

/**
 * VALIDATION FINALE - √âTAT POST-INTERVENTION
 * 
 * Script de validation pour mesurer l'impact des corrections
 * et g√©n√©rer un rapport final d'√©tat du projet
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

class ValidationFinale {
    constructor() {
        this.rapportInitial = null;
        this.r√©sultatsValidation = {
            timestamp: new Date().toISOString(),
            fichiersTest√©s: 0,
            erreursRestantes: 0,
            correctionsEffectu√©es: 0,
            am√©liorationPourcentage: 0,
            d√©tailsParFichier: [],
            recommandationsFinals: []
        };
    }

    /**
     * Charger le rapport initial pour comparaison
     */
    chargerRapportInitial() {
        try {
            const contenu = fs.readFileSync('scan-erreurs-syntaxe.json', 'utf8');
            this.rapportInitial = JSON.parse(contenu);
            console.log(`‚úÖ Rapport initial charg√©: ${this.rapportInitial.erreurs.total} erreurs d√©tect√©es`);
        } catch (erreur) {
            throw new Error(`Impossible de charger le rapport initial: ${erreur.message}`);
        }
    }

    /**
     * Relancer un scan rapide de validation
     */
    async scanValidation() {
        console.log('üîÑ Scan de validation en cours...');
        
        const fichiersJS = this.collecterFichiersJS(path.join(__dirname, 'backend'));
        this.r√©sultatsValidation.fichiersTest√©s = fichiersJS.length;
        
        let erreursRestantes = 0;
        
        for (const fichier of fichiersJS) {
            const cheminRelatif = path.relative(path.join(__dirname, 'backend'), fichier);
            const syntaxeValide = await this.testerSyntaxeFichier(fichier);
            
            this.r√©sultatsValidation.d√©tailsParFichier.push({
                fichier: cheminRelatif,
                syntaxeValide: syntaxeValide,
                √©taitErron√©: this.fichier√âtaitErron√©(cheminRelatif),
                statut: syntaxeValide ? 'OK' : 'ERREUR'
            });
            
            if (!syntaxeValide) {
                erreursRestantes++;
            }
        }
        
        this.r√©sultatsValidation.erreursRestantes = erreursRestantes;
        console.log(`üìä Scan termin√©: ${erreursRestantes} erreurs restantes sur ${fichiersJS.length} fichiers`);
    }

    /**
     * V√©rifier si un fichier √©tait dans les erreurs initiales
     */
    fichier√âtaitErron√©(cheminRelatif) {
        if (!this.rapportInitial) return false;
        
        return this.rapportInitial.erreurs.d√©tails.some(erreur => 
            erreur.fichier.replace(/\\/g, '/') === cheminRelatif.replace(/\\/g, '/')
        );
    }

    /**
     * Collecter r√©cursivement tous les fichiers .js
     */
    collecterFichiersJS(dossier) {
        const fichiers = [];
        
        if (!fs.existsSync(dossier)) return fichiers;
        
        const √©l√©ments = fs.readdirSync(dossier);
        
        for (const √©l√©ment of √©l√©ments) {
            const cheminComplet = path.join(dossier, √©l√©ment);
            const stats = fs.statSync(cheminComplet);
            
            if (stats.isDirectory()) {
                if (!√©l√©ment.startsWith('.') && 
                    √©l√©ment !== 'node_modules' && 
                    √©l√©ment !== 'logs' && 
                    √©l√©ment !== 'data') {
                    fichiers.push(...this.collecterFichiersJS(cheminComplet));
                }
            } else if (path.extname(√©l√©ment) === '.js') {
                fichiers.push(cheminComplet);
            }
        }
        
        return fichiers;
    }

    /**
     * Tester la syntaxe d'un fichier
     */
    async testerSyntaxeFichier(cheminFichier) {
        try {
            execSync(`node --check "${cheminFichier}"`, { stdio: 'pipe', timeout: 5000 });
            return true;
        } catch {
            return false;
        }
    }

    /**
     * Calculer les am√©liorations
     */
    calculerAm√©liorations() {
        if (!this.rapportInitial) return;
        
        const erreursInitiales = this.rapportInitial.erreurs.total;
        const erreursRestantes = this.r√©sultatsValidation.erreursRestantes;
        
        this.r√©sultatsValidation.correctionsEffectu√©es = erreursInitiales - erreursRestantes;
        this.r√©sultatsValidation.am√©liorationPourcentage = erreursInitiales > 0 ? 
            Math.round((this.r√©sultatsValidation.correctionsEffectu√©es / erreursInitiales) * 100) : 0;
        
        console.log(`üìà Am√©liorations: ${this.r√©sultatsValidation.correctionsEffectu√©es} erreurs corrig√©es (${this.r√©sultatsValidation.am√©liorationPourcentage}%)`);
    }

    /**
     * G√©n√©rer les recommandations finales
     */
    g√©n√©rerRecommandationsFinales() {
        const recommendations = [];
        const erreursRestantes = this.r√©sultatsValidation.erreursRestantes;
        const totalFichiers = this.r√©sultatsValidation.fichiersTest√©s;
        const pourcentageCorruption = Math.round((erreursRestantes / totalFichiers) * 100);
        
        // √âtat g√©n√©ral
        if (pourcentageCorruption === 0) {
            recommendations.push('üéâ EXCELLENT: Aucune erreur de syntaxe d√©tect√©e!');
            recommendations.push('‚úÖ Le projet est pr√™t pour la production');
        } else if (pourcentageCorruption < 10) {
            recommendations.push('üü¢ BON: Tr√®s peu d\'erreurs restantes');
            recommendations.push('üîß Corrections finales recommand√©es avant production');
        } else if (pourcentageCorruption < 30) {
            recommendations.push('üü° MOYEN: Am√©liorations significatives mais travail restant');
            recommendations.push('‚ö†Ô∏è Tests suppl√©mentaires requis avant d√©ploiement');
        } else {
            recommendations.push('üî¥ CRITIQUE: Trop d\'erreurs persistent');
            recommendations.push('üö® Intervention manuelle urgente n√©cessaire');
        }
        
        // Recommandations techniques
        recommendations.push('üìã ACTIONS RECOMMAND√âES:');
        if (erreursRestantes > 0) {
            recommendations.push('  1. Corriger manuellement les erreurs restantes');
            recommendations.push('  2. Impl√©menter ESLint avec configuration stricte');
            recommendations.push('  3. Ajouter hooks pre-commit pour validation syntaxe');
            recommendations.push('  4. Former l\'√©quipe aux bonnes pratiques JavaScript');
        } else {
            recommendations.push('  1. Mettre en place monitoring qualit√© continu');
            recommendations.push('  2. Impl√©menter tests unitaires complets');
            recommendations.push('  3. Documenter standards de code √©tablis');
            recommendations.push('  4. Automatiser validation dans CI/CD');
        }
        
        // Monitoring
        recommendations.push('üìä MONITORING QUALIT√â:');
        recommendations.push('  ‚Ä¢ Scan syntaxe quotidien automatis√©');
        recommendations.push('  ‚Ä¢ Dashboard qualit√© temps r√©el');
        recommendations.push('  ‚Ä¢ Alertes sur r√©gression qualit√©');
        recommendations.push('  ‚Ä¢ M√©triques d√©tection pr√©coce');
        
        this.r√©sultatsValidation.recommandationsFinals = recommendations;
    }

    /**
     * G√©n√©rer le rapport final complet
     */
    g√©n√©rerRapportFinal() {
        const rapport = {
            ...this.r√©sultatsValidation,
            comparaison: {
                erreursInitiales: this.rapportInitial?.erreurs?.total || 0,
                erreursFinales: this.r√©sultatsValidation.erreursRestantes,
                diff√©rence: (this.rapportInitial?.erreurs?.total || 0) - this.r√©sultatsValidation.erreursRestantes
            },
            statistiques: {
                fichiersCorrig√©s: this.r√©sultatsValidation.d√©tailsParFichier.filter(f => 
                    f.√©taitErron√© && f.syntaxeValide
                ).length,
                nouveauxProbl√®mes: this.r√©sultatsValidation.d√©tailsParFichier.filter(f => 
                    !f.√©taitErron√© && !f.syntaxeValide
                ).length,
                probl√®mesPersistants: this.r√©sultatsValidation.d√©tailsParFichier.filter(f => 
                    f.√©taitErron√© && !f.syntaxeValide
                ).length
            }
        };
        
        fs.writeFileSync('rapport-validation-finale.json', JSON.stringify(rapport, null, 2));
        return rapport;
    }

    /**
     * Ex√©cuter la validation finale
     */
    async ex√©cuter() {
        console.log('üéØ VALIDATION FINALE - √âTAT POST-INTERVENTION');
        console.log('==============================================');
        
        try {
            // Charger rapport initial
            this.chargerRapportInitial();
            
            // Scanner l'√©tat actuel
            await this.scanValidation();
            
            // Calculer am√©liorations
            this.calculerAm√©liorations();
            
            // G√©n√©rer recommandations
            this.g√©n√©rerRecommandationsFinales();
            
            // Cr√©er rapport final
            const rapportFinal = this.g√©n√©rerRapportFinal();
            
            // Afficher r√©sum√©
            this.afficherR√©sum√©(rapportFinal);
            
        } catch (erreur) {
            console.error('‚ùå Erreur lors de la validation:', erreur.message);
            throw erreur;
        }
    }

    /**
     * Afficher le r√©sum√© de validation
     */
    afficherR√©sum√©(rapport) {
        console.log('\nüìä R√âSUM√â DE LA VALIDATION');
        console.log('===========================');
        
        // √âtat g√©n√©ral
        const pourcentageCorruption = Math.round((rapport.erreursRestantes / rapport.fichiersTest√©s) * 100);
        console.log(`üìÅ Fichiers analys√©s: ${rapport.fichiersTest√©s}`);
        console.log(`‚ùå Erreurs restantes: ${rapport.erreursRestantes} (${pourcentageCorruption}%)`);
        
        // Comparaison avant/apr√®s
        console.log('\nüìà COMPARAISON AVANT/APR√àS:');
        console.log(`   Erreurs initiales: ${rapport.comparaison.erreursInitiales}`);
        console.log(`   Erreurs finales: ${rapport.comparaison.erreursFinales}`);
        console.log(`   Corrections: ${rapport.correctionsEffectu√©es} (${rapport.am√©liorationPourcentage}%)`);
        
        // Statistiques d√©taill√©es
        console.log('\nüîß D√âTAIL DES CORRECTIONS:');
        console.log(`   ‚úÖ Fichiers corrig√©s: ${rapport.statistiques.fichiersCorrig√©s}`);
        console.log(`   ‚ö†Ô∏è Probl√®mes persistants: ${rapport.statistiques.probl√®mesPersistants}`);
        console.log(`   üÜï Nouveaux probl√®mes: ${rapport.statistiques.nouveauxProbl√®mes}`);
        
        // √âtat final
        console.log('\nüéØ √âTAT FINAL DU PROJET:');
        if (pourcentageCorruption === 0) {
            console.log('   üéâ PARFAIT - Aucune erreur de syntaxe');
        } else if (pourcentageCorruption < 10) {
            console.log('   üü¢ EXCELLENT - Tr√®s peu d\'erreurs');
        } else if (pourcentageCorruption < 30) {
            console.log('   üü° ACCEPTABLE - Am√©liorations n√©cessaires');
        } else {
            console.log('   üî¥ CRITIQUE - Intervention urgente requise');
        }
        
        // Recommandations
        console.log('\nüí° RECOMMANDATIONS FINALES:');
        rapport.recommandationsFinals.slice(0, 8).forEach(rec => {
            console.log(`   ${rec}`);
        });
        
        console.log(`\nüìÑ Rapport complet: rapport-validation-finale.json`);
    }
}

// Ex√©cution du script
if (require.main === module) {
    const validateur = new ValidationFinale();
    
    validateur.ex√©cuter().catch(erreur => {
        console.error('üí• Erreur fatale lors de la validation:', erreur);
        process.exit(1);
    });
}

module.exports = ValidationFinale;