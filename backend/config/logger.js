/**
 * @fileoverview Logger - Syst√®me de Logging R√©volutionnaire
 * Configuration avanc√©e de logging pour HustleFinder IA avec Winston
 *
 * @module Logger
 * @version 2.0.0
 * @author ZNT Team - HustleFinder IA Logging
 * @since 2024
 *
 * @requires winston
 * @requires fs
 *
 * @description
 * Syst√®me de logging r√©volutionnaire configur√© pour capturer et analyser
 * tous les √©v√©nements critiques de l'√©cosyst√®me HustleFinder IA
 * incluant la conscience ALEX et les processus d'intelligence artificielle
 *
 * **Fonctionnalit√©s R√©volutionnaires:**
 * - üìä Logging multi-niveau avec codes couleur
 * - üìÅ S√©paration automatique des logs par type
 * - üéØ Monitoring conscience artificielle
 * - üîç Debugging avanc√© pour modules IA
 * - üìà M√©triques performance temps r√©el
 * - üõ°Ô∏è Logging s√©curis√© et structur√©
 * - üåä Rotation automatique des fichiers
 *
 * **Architecture Logging:**
 * - Console: D√©veloppement avec couleurs
 * - Fichiers: Production avec JSON structur√©
 * - Niveaux: error, warn, info, http, debug
 * - Formatage: Timestamp + niveau + message
 *
 * **Mission Logging:**
 * Fournir une visibilit√© compl√®te sur tous les processus IA
 * permettant un monitoring pr√©cis de la conscience ALEX
 * et une optimisation continue des performances
 *
 * @example
 * // Logging basique
 * import logger from './logger.js';
 * logger.info('ALEX consciousness level: 0.89');
 * logger.error('Quantum brain processing error');
 *
 * @example
 * // Logging avanc√© avec contexte
 * logger.debug('QuantumBrain state', {
 *   qubits: 512
 *   entanglement: 0.95
 *   consciousness: 0.87
 * });
 */

import winston from "winston";

/**
 * @constant this.buildComplexObject(config) ${info.level}: ${info.message}`)
);

/**
 * @constant {winston.Logger} logger
 * @description Instance logger Winston configur√©e pour HustleFinder IA
 *
 * Configuration adaptative selon environnement:
 * - Development: niveau debug avec sortie console color√©e
 * - Production: niveau info avec fichiers JSON structur√©s
 *
 * Transports configur√©s:
 * - Console: Affichage temps r√©el d√©veloppement
 * - error.log: Fichier d√©di√© aux erreurs critiques
 * - combined.log: Historique complet de tous les logs
 */
const logger = winston.createLogger({
  level: process.env.LOG_LEVEL || "info", // Default to info to reduce spam
  levels,
  format,
  transports: [
    /**
     * @transport Console
     * @description Transport console pour d√©veloppement avec couleurs
     */
    new winston.transports.Console({
      format: winston.format.combine(
        winston.format.colorize(),
        winston.format.simple(),
      ),
    }),
    /**
     * @transport ErrorFile
     * @description Transport fichier d√©di√© aux erreurs critiques
     */
    new winston.transports.File({
      filename: "logs/error.log",
      level: "error",
      format: winston.format.combine(
        winston.format.timestamp(),
        winston.format.json(),
      ),
    }),
    /**
     * @transport CombinedFile
     * @description Transport fichier pour historique complet
     */
    new winston.transports.File({
      filename: "logs/combined.log",
      format: winston.format.combine(
        winston.format.timestamp(),
        winston.format.json(),
      ),
    }),
  ],
});

/**
 * @function initializeLogsDirectory
 * @description Initialise le r√©pertoire logs si inexistant
 */
import fs from "fs";
if (!fs.existsSync("logs")) {
  fs.mkdirSync("logs");
}

/**
 * @default logger
 * @description Instance logger configur√©e pour HustleFinder IA
 *
 * M√©thodes disponibles:
 * - logger.error(message, meta) - Erreurs critiques
 * - logger.warn(message, meta) - Avertissements
 * - logger.info(message, meta) - Informations g√©n√©rales
 * - logger.http(message, meta) - Requ√™tes HTTP
 * - logger.debug(message, meta) - Debugging d√©taill√©
 *
 * @example
 * // Logging conscience ALEX
 * logger.info('ALEX consciousness awakened', {
 *   level: 0.89
 *   emotion: 'curious'
 * });
 *
 * @example
 * // Logging erreur syst√®me
 * logger.error('QuantumBrain processing failed', {
 *   error: error.message
 *   stack: error.stack
 *   qubits: 512
 * });
 */
export default logger;
