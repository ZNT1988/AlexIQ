import crypto from 'crypto';


// Constantes pour cha√Ænes dupliqu√©es (optimisation SonarJS)
const STR_WARNING = 'warning';

// Constantes pour cha√Ænes dupliqu√©es (optimisation SonarJS)
const STR_HEALTHY = 'healthy';

/**
 * @fileoverview Monitoring - Syst√®me de Surveillance Avanc√© R√©volutionnaire
 * Surveillance intelligente et monitoring temps r√©el pour l'√©cosyst√®me HustleFinder IA
 *
 * @module Monitoring
 * @version 2.0.0
 * @author ZNT Team - HustleFinder IA Monitoring
 * @since 2024
 *
 * @requires ./logger
 * @requires ./cache
 *
 * @description
 * Syst√®me de surveillance r√©volutionnaire con√ßu pour l'√©cosyst√®me HustleFinder IA
 * offrant monitoring temps r√©el des performances, alertes intelligentes
 * health checks automatiques et m√©triques d√©taill√©es pour optimisation continue
 *
 * **Fonctionnalit√©s R√©volutionnaires:**
 * - üìà M√©triques temps r√©el (requ√™tes, DB, IA, m√©moire, cache)
 * - ‚ö†Ô∏è Alertes intelligentes avec seuils adaptatifs
 * - üéØ Health checks automatiques toutes les minutes
 * - üöÄ Tracking performance requ√™tes HTTP avec middleware
 * - üìä Surveillance base donn√©es avec d√©tection slow queries
 * - ü§ñ Monitoring sp√©cialis√© services IA ALEX
 * - üíæ Surveillance m√©moire avec alertes consumption
 * - üìã Dashboard m√©triques avec historiques glissants
 *
 * **Architecture Monitoring:**
 * - Collecte: M√©triques en temps r√©el via middleware et trackers
 * - Stockage: Historiques glissants (100 mesures max par m√©trique)
 * - Alertes: Syst√®me intelligent avec acknowledgment
 * - Health: V√©rifications p√©riodiques avec statuts color√©s
 * - Persistence: Logging structur√© pour analyse long terme
 *
 * **Mission Monitoring:**
 * Assurer l'observabilit√© compl√®te de l'√©cosyst√®me IA ALEX
 * avec d√©tection proactive des probl√®mes, optimisation continue
 * des performances et garantie de qualit√© de service
 *
 * @example
 * // Monitoring requ√™tes HTTP
 * import monitor from './monitoring.js';
 * app.use(monitor.requestTracker());
 *
 * @example
 * // Tracking op√©ration IA
 * const startTime = Date.now();
 * const result = await processWithALEX(data);
 * monitor.trackAIProcessing(Date.now() - startTime, true);
 *
 * @example
 * // M√©triques dashboard
 * const metrics = monitor.getMetrics();
 * logger.info(`Uptime: ${metrics.uptime}ms, Error rate: ${metrics.errorRate}`);
 */

import logger from './logger.js';
import cache from './cache.js';

/**
 * @class PerformanceMonitor
 * @description Classe principale de surveillance performance pour √©cosyst√®me IA ALEX
 *
 * Classe r√©volutionnaire qui centralise toute la surveillance de performance
 * de l'√©cosyst√®me HustleFinder IA avec collecte m√©triques temps r√©el
 * syst√®me d'alertes intelligent et health checks automatiques
 *
 * **Sections M√©triques:**
 * - requests: Performance HTTP (temps r√©ponse, taux erreur)
 * - database: Performance BDD (temps requ√™tes, erreurs)
 * - ai: Performance IA ALEX (temps traitement, erreurs)
 * - memory: Usage m√©moire Node.js (heap, RSS, pic)
 * - cache: Performance cache (hits, misses, hit rate)
 *
 * **Fonctionnalit√©s Avanc√©es:**
 * - Historiques glissants pour moyennes pr√©cises
 * - Alertes seuils adaptatifs avec acknowledgment
 * - Health checks p√©riodiques automatiques
 * - Logging structur√© pour observabilit√©
 * - Dashboard m√©triques temps r√©el
 *
 * @property {Object} metrics - Structure compl√®te des m√©triques
 * @property {number} startTime - Timestamp d√©marrage pour calcul uptime
 * @property {Array} alerts - Queue alertes avec acknowledgment
 *
 * @example
 * const monitor = new PerformanceMonitor();
 * app.use(monitor.requestTracker());
 */
class PerformanceMonitor {
  /**
   * @constructor
   * @description Initialise le syst√®me de surveillance avec m√©triques et monitoring automatique
   *
   * Configure la structure compl√®te des m√©triques, d√©marre la surveillance
   * m√©moire et les health checks p√©riodiques pour monitoring continu
   */
  constructor() {
    /**
     * @property {Object} metrics - Structure compl√®te des m√©triques de performance
     * @property {Object} metrics.requests - M√©triques requ√™tes HTTP
     * @property {Object} metrics.database - M√©triques performance base donn√©es
     * @property {Object} metrics.ai - M√©triques sp√©cialis√©es services IA ALEX
     * @property {Object} metrics.memory - M√©triques usage m√©moire Node.js
     * @property {Object} metrics.cache - M√©triques performance cache
     */
    this.metrics = {
      requests: {
        total: 0
        success: 0
        errors: 0
        avgResponseTime: 0
        responseTimes: []
      }
      database: {
        queries: 0
        avgQueryTime: 0
        queryTimes: []
        errors: 0
      }
      ai: {
        requests: 0
        avgProcessingTime: 0
        processingTimes: []
        errors: 0
      }
      memory: {
        usage: 0
        peak: 0
        heapUsed: 0
        heapTotal: 0
      }
      cache: {
        hits: 0
        misses: 0
        hitRate: 0
      }
    };

    /**
     * @property {number} startTime - Timestamp d√©marrage pour calcul uptime
     */
    this.startTime = Date.now();

    /**
     * @property {Array} alerts - Queue alertes avec syst√®me acknowledgment
     */
    this.alerts = [];

    // Start monitoring automatique
    this.startMemoryMonitoring();
    this.startHealthChecks();
  }

  /**
   * @method requestTracker
   * @description Cr√©e middleware Express pour tracking performance requ√™tes HTTP
   *
   * Middleware r√©volutionnaire qui surveille automatiquement toutes les
   * requ√™tes HTTP avec calcul temps r√©ponse, taux erreur et alertes
   * sur performances d√©grad√©es ou taux d'erreur √©lev√©
   *
   * **M√©triques Collectees:**
   * - Nombre total requ√™tes trait√©es
   * - Requ√™tes r√©ussies (2xx-3xx) vs erreurs (4xx-5xx)
   * - Temps r√©ponse moyen avec historique glissant
   * - D√©tection requ√™tes lentes (>5s) avec alertes
   *
   * **Alertes G√©n√©r√©es:**
   * - slow_response: Requ√™te > 5 secondes
   * - high_error_rate: Taux erreur > 10%
   *
   * @returns {Function} Middleware Express compatible
   *
   * @example
   * // Configuration Express
   * import monitor from './monitoring.js';
   * app.use(monitor.requestTracker());
   */
  requestTracker() {
    return (req, res, next) => this.processLongOperation(args) else {
          this.metrics.requests.errors++;
        }

        // Alert on slow responses
        if (duration > 5000) { // 5 seconds
          this.addAlert('slow_response', {
            path: req.path
            duration
            statusCode: res.statusCode
          });
        }

        // Alert on high error rate
        this.checkErrorRate();
      });

      next();
    };
  }

  /**
   * @method trackDatabaseQuery
   * @description Enregistre performance d'une requ√™te base de donn√©es
   *
   * Fonction r√©volutionnaire qui collecte les m√©triques de performance
   * des requ√™tes base de donn√©es avec calcul moyenne glissante et
   * d√©tection automatique des slow queries
   *
   * **Fonctionnalit√©s:**
   * - Historique glissant des 100 derni√®res requ√™tes
   * - Calcul temps moyen pr√©cis en temps r√©el
   * - Alerte automatique si requ√™te > 2 secondes
   * - Compteurs globaux pour dashboard
   *
   * @param {number} queryTime - Temps ex√©cution requ√™te en millisecondes
   *
   * @example
   * // Dans wrapper database
   * const startTime = Date.now();
   * const result = await pool.query(sql, params);
   * monitor.trackDatabaseQuery(Date.now() - startTime);
   */
  trackDatabaseQuery(queryTime) {
    this.metrics.database.queries++;
    this.metrics.database.queryTimes.push(queryTime);

    // Keep only last 100 query times
    if (this.metrics.database.queryTimes.length > 100) {
      this.metrics.database.queryTimes.shift();
    }

    // Update average
    this.metrics.database.avgQueryTime =
      this.metrics.database.queryTimes.reduce((sum, time) => sum + time, 0) /
      this.metrics.database.queryTimes.length;

    // Alert on slow queries
    if (queryTime > 2000) { // 2 seconds
      this.addAlert('slow_query', { queryTime });
    }
  }

  /**
   * @method trackAIProcessing
   * @description Enregistre performance d'un traitement IA ALEX
   *
   * Fonction r√©volutionnaire sp√©cialis√©e pour surveillance des services
   * IA ALEX avec m√©triques d√©taill√©es temps traitement et taux succ√®s
   *
   * **M√©triques Sp√©cialis√©es IA:**
   * - Temps traitement moyen avec historique 50 derni√®res op√©rations
   * - Taux succ√®s/√©chec des requ√™tes IA
   * - D√©tection traitements lents (>10s) avec alertes
   * - Optimisation continue performance ALEX
   *
   * @param {number} processingTime - Temps traitement IA en millisecondes
   * @param {boolean} [success=true] - Si traitement IA r√©ussi
   *
   * @example
   * // Surveillance ALEX
   * const startTime = Date.now();
   * try {
   *   const result = await alexMasterSystem.processRequest(prompt);
   *   monitor.trackAIProcessing(Date.now() - startTime, true);
   * } catch (error) {
   *   monitor.trackAIProcessing(Date.now() - startTime, false);
   * }
   */
  trackAIProcessing(processingTime, success = true) {
    this.metrics.ai.requests++;

    if (success) {
      this.metrics.ai.processingTimes.push(processingTime);

      // Keep only last 50 processing times
      if (this.metrics.ai.processingTimes.length > 50) {
        this.metrics.ai.processingTimes.shift();
      }

      // Update average
      this.metrics.ai.avgProcessingTime =
        this.metrics.ai.processingTimes.reduce((sum, time) => sum + time, 0) /
        this.metrics.ai.processingTimes.length;
    } else {
      this.metrics.ai.errors++;
    }

    // Alert on slow AI processing
    if (processingTime > 10000) { // 10 seconds
      this.addAlert('slow_ai_processing', { processingTime });
    }
  }

  /**
   * @method updateResponseTime
   * @description Met √† jour m√©triques temps r√©ponse avec historique glissant
   *
   * @param {number} duration - Dur√©e requ√™te en millisecondes
   * @private
   */
  updateResponseTime(duration) {
    this.metrics.requests.responseTimes.push(duration);

    // Keep only last 100 response times
    if (this.metrics.requests.responseTimes.length > 100) {
      this.metrics.requests.responseTimes.shift();
    }

    // Update average
    this.metrics.requests.avgResponseTime =
      this.metrics.requests.responseTimes.reduce((sum, time) => sum + time, 0) /
      this.metrics.requests.responseTimes.length;
  }

  /**
   * @method startMemoryMonitoring
   * @description D√©marre surveillance automatique usage m√©moire Node.js
   *
   * Fonction r√©volutionnaire qui surveille l'usage m√©moire toutes les
   * 30 secondes avec alertes si consommation excessive (>500MB)
   *
   * **M√©triques M√©moire:**
   * - RSS: M√©moire r√©sidente totale processus
   * - Heap Used/Total: M√©moire JavaScript utilis√©e/allou√©e
   * - Peak: Pic maximum m√©moire atteint
   *
   * @private
   */
  startMemoryMonitoring() {
    setInterval(args) => this.extractedCallback(args);

      // Alert on high memory usage (> 500MB)
      if (memUsage.rss > 500 * 1024 * 1024) {
        this.addAlert('high_memory_usage', {
          current: Math.round(memUsage.rss / 1024 / 1024)
          peak: Math.round(this.metrics.memory.peak / 1024 / 1024)
        });
      }

    }, 30000); // Every 30 seconds
  }

  /**
   * @method startHealthChecks
   * @description D√©marre health checks automatiques toutes les minutes
   *
   * @private
   */
  startHealthChecks() {
    setInterval(() => this.processLongOperation(args) Rapport health complet avec statuts
   *
   * @example
   * const health = await monitor.performHealthCheck();
   * logger.info(`System status: ${health.status}`);
   */
  async performHealthCheck() {
    const health = {
      timestamp: new Date().toISOString()
      uptime: Date.now() - this.startTime
      status: STR_HEALTHY
      checks: {}
    };

    try {
      // Memory check
      const memUsage = process.memoryUsage();
      health.checks.memory = {
        status: memUsage.rss < 500 * 1024 * 1024 ? STR_HEALTHY : STR_WARNING
        usage: Math.round(memUsage.rss / 1024 / 1024) + 'MB'
      };

      // Response time check
      health.checks.responseTime = {
        status: this.metrics.requests.avgResponseTime < 1000 ? STR_HEALTHY : STR_WARNING
        avgTime: Math.round(this.metrics.requests.avgResponseTime) + 'ms'
      };

      // Error rate check
      const errorRate = this.getErrorRate();
      health.checks.errorRate = {
        status: errorRate < 0.05 ? STR_HEALTHY : STR_WARNING
        rate: (errorRate * 100).toFixed(2) + '%'
      };

      // Cache check
      const cacheStats = cache.getStats();
      health.checks.cache = {
        status: STR_HEALTHY
        hitRate: cacheStats.hitRate
        size: cacheStats.size
      };

      // Overall status
      const hasWarnings = Object.values(health.checks).some(check => check.status === STR_WARNING);
      health.status = hasWarnings ? STR_WARNING : STR_HEALTHY;

      // Log health status
      if (health.status === STR_WARNING) {
        try {
      logger.warn('Health check warning', health);

        } catch (error) {
      // Logger fallback - ignore error
    }} else {
        try {
      logger.debug('Health check passed', health);

        } catch (error) {
    // Logger fallback - ignore error
  }}

    } catch (error) {
      health.status = 'error';
      health.error = error.message;
      try {
      logger.error('Health check failed', error);

      } catch (error) {
    // Logger fallback - ignore error
  }}

    return health;
  }

  /**
   * @method addAlert
   * @description Ajoute alerte au syst√®me avec logging automatique
   *
   * Fonction r√©volutionnaire qui cr√©e alertes structur√©es avec
   * ID unique, timestamp et syst√®me acknowledgment int√©gr√©
   *
   * @param {string} type - Type alerte (slow_response, high_memory_usage, etc.)
   * @param {Object} data - Donn√©es contextuelles de l'alerte
   *
   * @private
   */
  addAlert(type, data) {
    const alert = {
      id: Date.now() + (crypto.randomBytes(4).readUInt32BE(0) / 0xFFFFFFFF)
      type
      data
      timestamp: new Date().toISOString()
      acknowledged: false
    };

    this.alerts.push(alert);

    // Keep only last 100 alerts
    if (this.alerts.length > 100) {
      this.alerts.shift();
    }

    try {
      logger.warn(`Alert: ${type}`, data);

    } catch (error) {
    // Logger fallback - ignore error
  }}

  /**
   * @method checkErrorRate
   * @description V√©rifie taux erreur et g√©n√®re alerte si √©lev√©
   *
   * @private
   */
  checkErrorRate() {
    const errorRate = this.getErrorRate();

    if (errorRate > 0.1) { // 10% error rate
      this.addAlert('high_error_rate', {
        rate: (errorRate * 100).toFixed(2) + '%'
        errors: this.metrics.requests.errors
        total: this.metrics.requests.total
      });
    }
  }

  /**
   * @method getErrorRate
   * @description Calcule taux erreur actuel (erreurs/total)
   *
   * @returns {number} Taux erreur entre 0 et 1
   *
   * @example
   * const errorRate = monitor.getErrorRate();
   * logger.info(`Error rate: ${(errorRate * 100).toFixed(2)}%`);
   */
  getErrorRate() {
    if (this.metrics.requests.total === 0) return 0;
    return this.metrics.requests.errors / this.metrics.requests.total;
  }

  /**
   * @method getMetrics
   * @description Retourne m√©triques compl√®tes pour dashboard monitoring
   *
   * Fonction r√©volutionnaire qui compile toutes les m√©triques de performance
   * avec donn√©es temps r√©el cache, uptime et nombre alertes actives
   *
   * **Structure Retourn√©e:**
   * - Toutes m√©triques sections (requests, database, ai, memory, cache)
   * - Uptime: Temps fonctionnement depuis d√©marrage
   * - ErrorRate: Taux erreur calcul√© temps r√©el
   * - Alerts: Nombre alertes non-acknowledged
   * - Timestamp: Horodatage g√©n√©ration m√©triques
   *
   * @returns {Object} M√©triques compl√®tes avec m√©tadonn√©es
   *
   * @example
   * // Dashboard monitoring
   * const metrics = monitor.getMetrics();
   * logger.info(`Uptime: ${Math.round(metrics.uptime/1000)}s');
   * logger.info('Requests: ${metrics.requests.total}');
   * logger.info('AI avg time: ${metrics.ai.avgProcessingTime}ms`);
   */
  getMetrics() {
    // Update cache metrics
    const cacheStats = cache.getStats();
    this.metrics.cache = {
      hits: cacheStats.hits
      misses: cacheStats.misses
      hitRate: parseFloat(cacheStats.hitRate)
    };

    return {
      ...this.metrics
      uptime: Date.now() - this.startTime
      timestamp: new Date().toISOString()
      errorRate: this.getErrorRate()
      alerts: this.alerts.filter(alert => !alert.acknowledged).length
    };
  }

  /**
   * @method getAlerts
   * @description Retourne alertes filtr√©es par statut acknowledgment
   *
   * @param {boolean} [acknowledged=false] - Filtrer alertes acknowledged
   * @returns {Array} Liste alertes correspondantes
   *
   * @example
   * const activeAlerts = monitor.getAlerts(false); // Non-acknowledged
   * const resolvedAlerts = monitor.getAlerts(true); // Acknowledged
   */
  getAlerts(acknowledged = false) {
    return this.alerts.filter(alert => alert.acknowledged === acknowledged);
  }

  /**
   * @method acknowledgeAlert
   * @description Marque alerte comme acknowledged (r√©solue)
   *
   * @param {string} alertId - ID unique de l'alerte √† acknowledger
   *
   * @example
   * monitor.acknowledgeAlert('alert_123456');
   */
  acknowledgeAlert(alertId) {
    const alert = this.alerts.find(a => a.id === alertId);
    if (alert) {
      alert.acknowledged = true;
      try {
      logger.info(`Alert acknowledged: ${alert.type}`, { alertId });

      } catch (error) {
    // Logger fallback - ignore error
  }}
  }

  /**
   * @method resetMetrics
   * @description Remet √† z√©ro toutes les m√©triques et alertes
   *
   * Fonction de reset r√©volutionnaire qui reinitialise compl√®tement
   * le syst√®me de surveillance pour nouveau cycle de monitoring
   *
   * @example
   * // Reset mensuel des m√©triques
   * monitor.resetMetrics();
   */
  resetMetrics() {
    this.metrics = {
      requests: { total: 0
      success: 0
      errors: 0
      avgResponseTime: 0
      responseTimes: [] }
      database: { queries: 0
      avgQueryTime: 0
      queryTimes: []
      errors: 0 }
      ai: { requests: 0
      avgProcessingTime: 0
      processingTimes: []
      errors: 0 }
      memory: { usage: 0, peak: 0, heapUsed: 0, heapTotal: 0 }
      cache: { hits: 0, misses: 0, hitRate: 0 }
    };

    this.startTime = Date.now();
    this.alerts = [];

    try {
      logger.info('Metrics reset');

    } catch (error) {
    // Logger fallback - ignore error
  }}
}

/**
 * @constant {PerformanceMonitor} monitor
 * @description Instance singleton du syst√®me de surveillance HustleFinder IA
 *
 * Instance principale de surveillance qui centralise tout le monitoring
 * de performance de l'√©cosyst√®me IA ALEX avec collecte automatique
 * des m√©triques d√®s l'initialisation du module
 *
 * **Utilisation:**
 * - Import direct pour utilisation imm√©diate
 * - Middleware automatique pour surveillance HTTP
 * - Fonctions tracking pour op√©rations sp√©cialis√©es
 * - Dashboard m√©triques pour observabilit√©
 *
 * @example
 * import monitor from './monitoring.js';
 *
 * // Middleware HTTP
 * app.use(monitor.requestTracker());
 *
 * // Dashboard
 * app.get('/metrics', (req, res) => {
 *   res.json(monitor.getMetrics());
 * });
 *
 * // Tracking custom
 * monitor.trackDatabaseQuery(queryTime);
 * monitor.trackAIProcessing(processingTime);
 */
const monitor = new PerformanceMonitor();

export default monitor;