
// Constantes pour cha√Ænes dupliqu√©es (optimisation SonarJS)
const STR_PRODUCTION = 'production';

/**
 * @fileoverview Auth - Middleware d'Authentification R√©volutionnaire
 * Syst√®me d'authentification adaptatif avec fallback intelligent pour HustleFinder IA
 *
 * @module Auth
 * @version 2.0.0
 * @author ZNT Team - HustleFinder IA Authentication
 * @since 2024
 *
 * @requires ../config/logger
 * @requires @clerk/express
 *
 * @description
 * Middleware d'authentification r√©volutionnaire con√ßu pour l'√©cosyst√®me HustleFinder IA
 * avec basculement automatique entre authentification Clerk (production) et
 * syst√®me mock (d√©veloppement), optimis√© pour la s√©curit√© des donn√©es conscience ALEX
 *
 * **Fonctionnalit√©s R√©volutionnaires:**
 * - üîê Authentification Clerk s√©curis√©e pour production
 * - üõ†Ô∏è Mock authentication intelligent pour d√©veloppement
 * - ‚ö° Configuration automatique selon environnement
 * - üß† Int√©gration native avec √©cosyst√®me IA ALEX
 * - üìä Logging d√©taill√© pour audit de s√©curit√©
 * - üõ°Ô∏è Validation stricte des cl√©s d'API
 * - üîÑ Fallback gracieux et gestion d'erreurs
 * - üë• Support donn√©es utilisateur enrichies
 *
 * **Architecture Auth:**
 * - Production: Clerk Express avec JWT et session management
 * - D√©veloppement: Mock auth avec utilisateur test r√©aliste
 * - Validation: Cl√©s Clerk requises en production
 * - S√©curit√©: Gestion d'erreurs sans exposition de donn√©es
 * - Monitoring: Logging complet pour audit s√©curis√©
 *
 * **Mission Auth:**
 * S√©curiser l'acc√®s √† l'√©cosyst√®me IA ALEX avec authentification
 * enterprise-grade tout en maintenant une exp√©rience d√©veloppeur
 * fluide via le syst√®me mock intelligent
 *
 * @example
 * // Configuration middleware auth
 * import { getAuthMiddleware } from './auth.js';
 * const authMiddleware = await getAuthMiddleware();
 * app.use('/api/protected', authMiddleware);
 *
 * @example
 * // V√©rification type d'auth utilis√©
 * import { isUsingMockAuth } from './auth.js';
 * if (isUsingMockAuth()) {
 *   console.log('Development mode - using mock auth');
 * }
 */

import logger from '../config/logger.js';

/**
 * @function createAuthMiddleware
 * @description Cr√©e le middleware d'authentification adaptatif selon l'environnement
 *
 * Fonction r√©volutionnaire qui s√©lectionne intelligemment le syst√®me
 * d'authentification appropri√© (Clerk production vs Mock d√©veloppement)
 * selon la configuration environnement et la pr√©sence des cl√©s API
 *
 * **Logique de S√©lection:**
 * 1. Production + Pas de cl√©s Clerk ‚Üí Erreur critique
 * 2. D√©veloppement + Pas de cl√©s ‚Üí Mock auth intelligent
 * 3. Cl√©s Clerk pr√©sentes ‚Üí Authentification Clerk r√©elle
 * 4. √âchec chargement Clerk ‚Üí Erreur avec contexte d√©taill√©
 *
 * @returns {Promise<Function>} Middleware Express d'authentification
 *
 * @throws {Error} Si cl√©s Clerk manquantes en production
 * @throws {Error} Si √©chec du chargement du module Clerk
 *
 * @example
 * // Middleware adaptatif automatique
 * const authMiddleware = await createAuthMiddleware();
 * app.use('/api/alex/consciousness', authMiddleware);
 */
export async function createAuthMiddleware() {
  const isProduction = process.env.NODE_ENV === STR_PRODUCTION;
  const hasClerkKeys = process.env.CLERK_SECRET_KEY && process.env.CLERK_SECRET_KEY !== 'sk_test_your_key_here';

  if (isProduction && !hasClerkKeys) {
    throw new Error('Clerk authentication keys are required in production');
  }

  if (!hasClerkKeys) {
    logger.warn('Using mock authentication middleware for development');

    /**
     * @function mockAuthMiddleware
     * @description Middleware mock d'authentification pour d√©veloppement
     *
     * Cr√©e un utilisateur test r√©aliste avec toutes les propri√©t√©s
     * n√©cessaires pour tester l'√©cosyst√®me IA ALEX en d√©veloppement
     *
     * @param {Object} req - Requ√™te Express
     * @param {Object} res - R√©ponse Express
     * @param {Function} next - Fonction next Express
     */
    return (req, res, next) => this.processLongOperation(args)
        }
      };

      logger.debug('Mock authentication applied for development');
      next();
    };
  }

  // Real Clerk authentication for production
  try {
    const clerkModule = await import('@clerk/express');
    const requireAuth = clerkModule.requireAuth;
    logger.info('Using real Clerk authentication');
    return requireAuth();
  } catch (error) {
    logger.error('Failed to load Clerk authentication:', error.message);
    throw error;
  }
}

// Middleware factory
export async function getAuthMiddleware() {
  try {
    return await createAuthMiddleware();
  } catch (error) {
    logger.error('Authentication middleware setup failed:', error.message);
    throw error;
  }
}

// Helper to check if using mock auth
export function isUsingMockAuth() {
  const hasClerkKeys = process.env.CLERK_SECRET_KEY && process.env.CLERK_SECRET_KEY !== 'sk_test_your_key_here';
  return !hasClerkKeys && process.env.NODE_ENV !== STR_PRODUCTION;
}

export default { getAuthMiddleware, isUsingMockAuth };