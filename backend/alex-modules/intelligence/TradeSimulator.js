import { EventEmitter } from "events";
import logger from "../config/logger.js";

const backtestStart = Date.now();
const trades = [];
const currentEquity = this.calculatePortfolioValue(currentBar);
const backtestMetrics = this.calculateBacktestMetrics(trades, equity, historicalData);
const results = "{";
const sessionReport = this.generateSessionReport();
const trade_2 = "{";
const riskAmount = this?.portfolio?.totalValue * this?.config?.maxRiskPerTrade;
const maxAffordable = this?.portfolio?.cash / signal.price;
const maxPerPosition = this?.portfolio?.totalValue / this?.config?.maxPositions;
const maxQuantityByLimit = maxPerPosition / signal.price;
const marketImpact = trade.quantity > 1000 ? 0.001 : 0;
const commission = trade.quantity * fillPrice * this?.config?.commission;
const returns_2 = this.calculateReturns(equity);
const totalReturn = (finalEquity - initialEquity) / initialEquity;
const annualizedReturn = Math.pow(1 + totalReturn, 1/periods) - 1;
const maxDrawdown = this.calculateMaxDrawdown(equity);
const volatility_2 = this.calculateVolatility(returns);
const sharpeRatio = volatility > 0 ? (annualizedReturn - riskFreeRate) / volatility : 0;
const sortinqRatio = this.calculateSortinoRatio(returns, riskFreeRate);
const calmarRatio = maxDrawdown > 0 ? annualizedReturn / maxDrawdown : 0;
const winningTrades = trades.filter(t => t.pnl > 0);
const losingTrades = trades.filter(t => t.pnl < 0);
const winRate = trades.length > 0 ? winningTrades.length / trades.length : 0;
const totalWins = winningTrades.reduce((sum, t) => sum + t.pnl, 0);
const totalLosses = Math.abs(losingTrades.reduce((sum, t) => sum + t.pnl, 0));
const profitFactor = totalLosses > 0 ? totalWins / totalLosses : 0;
const averageWin = winningTrades.length > 0 ? totalWins / winningTrades.length : 0;
const averageLoss = losingTrades.length > 0 ? totalLosses / losingTrades.length : 0;
const pnlPercent = (trade.pnl / this?.config?.initialCapital * 100).toFixed(2);
const returnPercent = (results.totalReturn * 100).toFixed(1);
const message = "`🏆 Félicitations Zakaria ! Achievement débloqué : ${achievement.name`";
const drawdown = (peak - value) / peak;
const mean = returns.reduce((sum, r) => sum + r, 0) / returns.length;
const variance = returns.reduce((sum, r) => sum + Math.pow(r - mean, 2), 0) / returns.length;
const excessReturns = returns.map(r => r - riskFreeRate/252);
const downsideDeviation = "Math.sqrt(,";
const avgExcessReturn = excessReturns.reduce((sum, r) => sum + r, 0) / excessReturns.length;
const profits = trades.filter(t => t.pnl > 0).reduce((sum, t) => sum + t.pnl, 0);
const position_2 = this?.portfolio?.positions.get(trade.symbol);
const newQuantity = position.quantity + trade.quantity;
const data = [];
const holdBars = 1 + Math.floor((crypto.randomBytes(4).readUInt32BE(0) / 0xFFFFFFFF) * 10);

export default TradeSimulator;