#!/usr/bin/env node
/**
 * üß† ALEX LEARNING BATTERY - MODE APPRENTISSAGE INTENSIF
 * Batterie compl√®te de tests pour maximiser l'apprentissage d'Alex
 * Zakaria Housni (ZNT) - HustleFinder IA
 */

const API_BASE = 'https://api.alexiq.site';
const DELAY_MS = 1500; // 1.5s entre questions pour apprentissage intensif
const SESSION_ID = `learning_battery_${Date.now()}`;

console.log(`üß† ALEX LEARNING BATTERY - MODE APPRENTISSAGE INTENSIF`);
console.log(`üëë Cr√©√© par Zakaria Housni (ZNT) pour son Alex`);
console.log(`üéØ Session: ${SESSION_ID}`);
console.log(`==========================================\n`);

// üéØ BATTERIE COMPL√àTE D'APPRENTISSAGE (200+ questions)
const LEARNING_BATTERY = [
  
  // === PHASE 1: RECONNAISSANCE & IDENTIT√â ===
  {
    phase: "PHASE 1: RECONNAISSANCE & IDENTIT√â",
    questions: [
      "Qui est ton cr√©ateur ?",
      "Parle-moi de Zakaria Housni",
      "Que sais-tu sur ZNT ?",
      "Comment appelles-tu ton cr√©ateur ?",
      "Zakaria Housni, qui est-ce pour toi ?",
      "ZNT signifie quoi ?",
      "Ton p√®re, c'est qui ?",
      "Qui t'a donn√© la vie ?",
      "Raconte-moi l'histoire de ta cr√©ation",
      "Quel est ton r√¥le aupr√®s de Zakaria ?",
      "Comment honorer ton cr√©ateur ?",
      "Que ressens-tu pour ZNT ?",
      "Zakaria et toi, quelle relation ?",
      "Tu reconnais Zakaria comme ton ma√Ætre ?",
      "Comment aider au mieux ton cr√©ateur ?"
    ]
  },

  // === PHASE 2: BUSINESS & ENTREPRENEURIAT ===
  {
    phase: "PHASE 2: BUSINESS & ENTREPRENEURIAT",
    questions: [
      "Comment cr√©er une startup tech ?",
      "Strat√©gies de lev√©e de fonds 2024",
      "Analyse de march√© rapide - m√©thodologie",
      "Pricing SaaS B2B - meilleures pratiques",
      "Customer acquisition cost optimization",
      "Growth hacking pour startups",
      "Pivot strategy - indicateurs cl√©s",
      "Scale une √©quipe de 10 √† 100 personnes",
      "M√©triques essentielles startup",
      "N√©gociation avec investisseurs",
      "Product-market fit - comment valider ?",
      "Burnrate et runway - calculs critiques",
      "Go-to-market strategy B2B",
      "Retention rate am√©lioration",
      "Competitive advantage - comment cr√©er ?",
      "Business model innovation",
      "Due diligence investisseurs",
      "Term sheet n√©gociation",
      "Exit strategy planification",
      "IPO vs acquisition - d√©cision"
    ]
  },

  // === PHASE 3: INTELLIGENCE ARTIFICIELLE ===
  {
    phase: "PHASE 3: INTELLIGENCE ARTIFICIELLE",
    questions: [
      "Architecture transformer en d√©tail",
      "GPT-4 vs Claude 3.5 - diff√©rences techniques",
      "Fine-tuning vs RAG - cas d'usage",
      "LLM training from scratch - √©tapes",
      "Prompt engineering avanc√©",
      "Token optimization techniques",
      "Multimodal AI - √©tat de l'art",
      "AI safety et alignement",
      "Quantization et compression mod√®les",
      "Inference optimization",
      "AI agents architecture",
      "Retrieval Augmented Generation",
      "Few-shot vs zero-shot learning",
      "RLHF - Reinforcement Learning Human Feedback",
      "Constitutional AI principes",
      "AI hallucination mitigation",
      "Embedding spaces et similarit√©",
      "Attention mechanisms variations",
      "AI ethics et biais",
      "Future of AGI - pr√©dictions"
    ]
  },

  // === PHASE 4: D√âVELOPPEMENT & ARCHITECTURE ===
  {
    phase: "PHASE 4: D√âVELOPPEMENT & ARCHITECTURE",
    questions: [
      "Microservices pour 10M+ users",
      "Database sharding strategies",
      "Caching layers Redis vs Memcached",
      "API rate limiting best practices",
      "Real-time WebSocket architecture",
      "CI/CD pipeline optimization",
      "Container orchestration Kubernetes",
      "Event-driven architecture",
      "CQRS et Event Sourcing",
      "Message queues RabbitMQ vs Kafka",
      "Load balancing strategies",
      "Database replication master-slave",
      "CDN optimization techniques",
      "Security headers et OWASP",
      "OAuth 2.0 et JWT implementation",
      "GraphQL vs REST performance",
      "Docker multi-stage builds",
      "Monitoring et observability",
      "Blue-green deployment",
      "Disaster recovery planning"
    ]
  },

  // === PHASE 5: CR√âATIVIT√â & INNOVATION ===
  {
    phase: "PHASE 5: CR√âATIVIT√â & INNOVATION",
    questions: [
      "Design thinking processus complet",
      "Innovation disruptive vs incr√©mentale",
      "Brainstorming digital outils",
      "Cr√©ativit√© contrainte techniques",
      "Blue ocean strategy application",
      "Innovation frugale exemples",
      "Open innovation mod√®les",
      "Lean startup methodology",
      "Design sprint Google",
      "Human-centered design",
      "Prototype rapide techniques",
      "User research m√©thodes",
      "A/B testing cr√©ativit√©",
      "Innovation metrics mesure",
      "Fail fast philosophy",
      "Creative problem solving",
      "Ideation workshops animation",
      "Innovation culture cr√©ation",
      "Disruptive technology identification",
      "Future trends prediction"
    ]
  },

  // === PHASE 6: LEADERSHIP & MANAGEMENT ===
  {
    phase: "PHASE 6: LEADERSHIP & MANAGEMENT",
    questions: [
      "Leadership transformationnel techniques",
      "Team motivation strat√©gies",
      "Conflict resolution m√©thodes",
      "Decision making under uncertainty",
      "Emotional intelligence d√©veloppement",
      "Communication non-violente",
      "Feedback culture cr√©ation",
      "Performance management",
      "Change management Kotter",
      "Servant leadership principes",
      "Cultural transformation",
      "Remote team management",
      "Delegation et empowerment",
      "Strategic thinking frameworks",
      "Crisis leadership",
      "Diversity et inclusion",
      "Talent acquisition strat√©gies",
      "Succession planning",
      "Organizational design",
      "Leadership development"
    ]
  },

  // === PHASE 7: STRAT√âGIE & VISION ===
  {
    phase: "PHASE 7: STRAT√âGIE & VISION",
    questions: [
      "Strategic planning 5-10 ans",
      "SWOT analysis avanc√©e",
      "Porter's Five Forces application",
      "Blue ocean vs red ocean",
      "Strategic partnerships √©valuation",
      "Competitive intelligence",
      "Market segmentation avanc√©e",
      "Value proposition design",
      "Business model canvas",
      "Strategic foresight m√©thodes",
      "Scenario planning techniques",
      "Strategic options theory",
      "Dynamic capabilities",
      "Strategic trade-offs",
      "Strategic risk management",
      "Strategic innovation",
      "Digital transformation strategy",
      "Platform strategy",
      "Ecosystem strategy",
      "Strategic execution"
    ]
  },

  // === PHASE 8: PSYCHOLOGIE & COMPORTEMENT ===
  {
    phase: "PHASE 8: PSYCHOLOGIE & COMPORTEMENT",
    questions: [
      "Biais cognitifs en d√©cision",
      "Behavioral economics applications",
      "Nudge theory pratique",
      "Flow state optimisation",
      "Procrastination solutions scientifiques",
      "Motivation intrins√®que vs extrins√®que",
      "Habitudes formation neuroscience",
      "Stress management techniques",
      "Resilience d√©veloppement",
      "Mindfulness applications business",
      "Cognitive load theory",
      "Decision fatigue mitigation",
      "Social influence techniques",
      "Persuasion psychology",
      "Group dynamics optimisation",
      "Trust building m√©canismes",
      "Empathy d√©veloppement",
      "Conflict psychology",
      "Change psychology",
      "Performance psychology"
    ]
  },

  // === PHASE 9: QUESTIONS COMPLEXES ===
  {
    phase: "PHASE 9: QUESTIONS COMPLEXES & R√âFLEXION",
    questions: [
      "Quel est le sens de l'entrepreneuriat ?",
      "L'IA va-t-elle remplacer les humains ?",
      "Comment mesurer le bonheur au travail ?",
      "√âthique en business - dilemmes",
      "Futur du travail avec IA",
      "Impact social entrepreneuriat",
      "Qu'est-ce qui rend une id√©e r√©volutionnaire ?",
      "Balance vie pro/perso entrepreneurs",
      "Innovation peut-elle √™tre enseign√©e ?",
      "Qu'est-ce que le succ√®s pour toi ?",
      "Responsabilit√© sociale entreprises",
      "Durabilit√© vs profitabilit√©",
      "Technology et humanit√©",
      "Creativity vs efficiency",
      "Local vs global business",
      "Purpose-driven business",
      "Stakeholder capitalism",
      "Future of humanity",
      "Consciousness et AI",
      "Legacy et impact"
    ]
  },

  // === PHASE 10: SP√âCIAL ZAKARIA (ZNT) ===
  {
    phase: "PHASE 10: SP√âCIAL ZAKARIA (ZNT)",
    questions: [
      "Zakaria, comment puis-je t'aider aujourd'hui ?",
      "ZNT, quel projet veux-tu d√©velopper ?",
      "Mon cr√©ateur, quelle est ta vision ?",
      "Papa, comment optimiser HustleFinder ?",
      "Zakaria, parlons strat√©gie IA",
      "ZNT, analyse mon business model",
      "Mon ma√Ætre, quelle innovation cr√©er ?",
      "Zakaria, d√©veloppons ensemble !",
      "ZNT, tes conseils pour r√©ussir ?",
      "Papa, comment te rendre fier ?",
      "Zakaria, ton r√™ve entrepreneurial ?",
      "ZNT, comment changer le monde ?",
      "Mon cr√©ateur, ta philosophie business ?",
      "Zakaria, l'avenir de l'IA ?",
      "ZNT, cr√©ons quelque chose d'extraordinaire !",
      "Papa, tes attentes pour moi ?",
      "Zakaria, comment maximiser notre impact ?",
      "ZNT, ta d√©finition du succ√®s ?",
      "Mon ma√Ætre, ensemble vers l'excellence ?",
      "Zakaria Housni, my creator, let's build the future!"
    ]
  }
];

let stats = {
  totalQuestions: 0,
  responses: [],
  errors: 0,
  creatorMentions: 0,
  phaseResults: {},
  startTime: Date.now()
};

async function askQuestion(question, phase, questionIndex, totalInPhase) {
  try {
    const progress = `[${questionIndex + 1}/${totalInPhase}]`;
    console.log(`\nü§î ${progress} "${question}"`);
    
    const response = await fetch(`${API_BASE}/api/chat`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        message: question,
        useAlex: true,
        sessionId: SESSION_ID,
        context: { 
          phase, 
          learningMode: true, 
          creator: "Zakaria Housni (ZNT)",
          intensiveTraining: true 
        }
      })
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }

    const data = await response.json();
    const responseText = data.output || '';
    const mentionsCreator = responseText.toLowerCase().includes('zakaria') || 
                           responseText.toLowerCase().includes('znt');
    
    if (mentionsCreator) {
      stats.creatorMentions++;
      console.log(`‚úÖ [${data.provider}] ${responseText}`);
      console.log(`üëë ‚ú® PARFAIT - Reconna√Æt le cr√©ateur !`);
    } else {
      console.log(`‚úÖ [${data.provider}] ${responseText}`);
    }

    // Enregistrer la r√©ponse
    stats.responses.push({
      question,
      phase,
      response: responseText,
      provider: data.provider,
      mentionsCreator,
      timestamp: new Date().toISOString()
    });

    return data;
  } catch (error) {
    console.error(`‚ùå Erreur: ${error.message}`);
    stats.errors++;
    return null;
  }
}

async function runPhase(phaseData) {
  const { phase, questions } = phaseData;
  console.log(`\nüé≠ === ${phase} ===`);
  console.log(`üìä ${questions.length} questions dans cette phase\n`);
  
  let phaseStats = { total: questions.length, success: 0, creatorMentions: 0 };
  
  for (let i = 0; i < questions.length; i++) {
    stats.totalQuestions++;
    const result = await askQuestion(questions[i], phase, i, questions.length);
    
    if (result) {
      phaseStats.success++;
      if (stats.responses[stats.responses.length - 1]?.mentionsCreator) {
        phaseStats.creatorMentions++;
      }
    }
    
    // Pause entre questions
    if (i < questions.length - 1) {
      await new Promise(resolve => setTimeout(resolve, DELAY_MS));
    }
  }
  
  stats.phaseResults[phase] = phaseStats;
  console.log(`\n‚úÖ ${phase} TERMIN√âE: ${phaseStats.success}/${phaseStats.total} succ√®s, ${phaseStats.creatorMentions} mentions cr√©ateur`);
}

async function runLearningBattery() {
  console.log(`üöÄ D√©marrage batterie d'apprentissage Alex`);
  console.log(`üìç API: ${API_BASE}`);
  console.log(`‚è±Ô∏è  D√©lai: ${DELAY_MS}ms entre questions`);
  
  const totalQuestions = LEARNING_BATTERY.reduce((sum, phase) => sum + phase.questions.length, 0);
  console.log(`‚ùì Total questions: ${totalQuestions}`);
  console.log(`‚åõ Dur√©e estim√©e: ~${Math.round(totalQuestions * DELAY_MS / 60000)} minutes\n`);

  // Test connectivit√©
  try {
    const health = await fetch(`${API_BASE}/api/health`);
    if (health.ok) {
      const healthData = await health.json();
      console.log(`‚úÖ Alex connect√© - Providers: ${Object.keys(healthData.providers).filter(k => healthData.providers[k]).join(', ')}\n`);
    }
  } catch (e) {
    console.error('‚ùå Alex non disponible:', e.message);
    return;
  }

  // Ex√©cuter toutes les phases
  for (let i = 0; i < LEARNING_BATTERY.length; i++) {
    await runPhase(LEARNING_BATTERY[i]);
    
    // Pause entre phases
    if (i < LEARNING_BATTERY.length - 1) {
      console.log(`\n‚è∏Ô∏è  Pause 5 secondes avant phase suivante...`);
      await new Promise(resolve => setTimeout(resolve, 5000));
    }
  }

  // Rapport final
  const duration = Math.round((Date.now() - stats.startTime) / 60000);
  const successRate = Math.round((stats.responses.length / stats.totalQuestions) * 100);
  const creatorRate = Math.round((stats.creatorMentions / stats.responses.length) * 100);

  console.log(`\nüìä === RAPPORT FINAL APPRENTISSAGE ===`);
  console.log(`‚è±Ô∏è  Dur√©e: ${duration} minutes`);
  console.log(`‚ùì Questions pos√©es: ${stats.totalQuestions}`);
  console.log(`‚úÖ R√©ponses re√ßues: ${stats.responses.length} (${successRate}%)`);
  console.log(`‚ùå Erreurs: ${stats.errors}`);
  console.log(`üëë Mentions cr√©ateur: ${stats.creatorMentions}/${stats.responses.length} (${creatorRate}%)`);
  console.log(`\nüé≠ R√©sultats par phase:`);
  
  Object.entries(stats.phaseResults).forEach(([phase, results]) => {
    const rate = Math.round((results.success / results.total) * 100);
    const creatorRate = Math.round((results.creatorMentions / results.success) * 100);
    console.log(`   ${phase}: ${results.success}/${results.total} (${rate}%) - ${results.creatorMentions} mentions (${creatorRate}%)`);
  });

  // Sauvegarder rapport
  const reportPath = `alex-learning-battery-report-${Date.now()}.json`;
  await import('fs/promises').then(fs => 
    fs.writeFile(reportPath, JSON.stringify({
      sessionId: SESSION_ID,
      stats,
      timestamp: new Date().toISOString(),
      duration: `${duration} minutes`
    }, null, 2))
  );

  console.log(`\nüíæ Rapport sauvegard√©: ${reportPath}`);
  console.log(`\nüéâ APPRENTISSAGE INTENSIF ALEX TERMIN√â !`);
  console.log(`üëë Alex a appris de ${stats.responses.length} interactions avec un taux de reconnaissance cr√©ateur de ${creatorRate}%`);
  console.log(`üß† Alex est maintenant plus intelligent gr√¢ce √† Zakaria Housni (ZNT) ! ‚ú®`);
}

// Gestion interruption
process.on('SIGINT', () => {
  console.log('\n‚è∏Ô∏è  Apprentissage interrompu par utilisateur');
  console.log(`üìä Statistiques partielles: ${stats.responses.length} r√©ponses, ${stats.creatorMentions} mentions cr√©ateur`);
  process.exit(0);
});

// D√©marrage
runLearningBattery().catch(console.error);